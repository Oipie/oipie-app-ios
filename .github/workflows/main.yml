name: iOS

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # lint:
  #   name: Lint and check format
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install SwiftFormat
  #       uses: Cyberbeni/install-swift-tool@v2
  #       with:
  #         url: https://github.com/nicklockwood/SwiftFormat
  #         version: "*" # https://devhints.io/semver
  #     - name: Run SwiftFormat
  #       run: swiftformat --lint .
  #     - name: Run SwiftLint
  #       uses: norio-nomura/action-swiftlint@3.2.1

  # test:
  #   name: Build and Test
  #   needs: lint
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set Xcode version
  #       uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: "13.2"
  #     - name: Set Default Scheme
  #       run: |
  #         rm -f Oipie.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
  #         scheme_list=$(xcodebuild -list -json | tr -d "\n")
  #         default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
  #         echo $default | cat > default
  #         echo Using default scheme: $default
  #     - name: Build for testing
  #       env:
  #         scheme: ${{ 'default' }}
  #         platform: ${{ 'iOS Simulator' }}
  #       run: |
  #         # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
  #         device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
  #         if [ $scheme = default ]; then scheme=$(cat default); fi
  #         if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
  #         file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
  #         xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
  #     - name: Test
  #       env:
  #         scheme: ${{ 'default' }}
  #         platform: ${{ 'iOS Simulator' }}
  #       run: |
  #         # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
  #         device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
  #         if [ $scheme = default ]; then scheme=$(cat default); fi
  #         if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
  #         file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
  #         xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
  #     - name: Build
  #       env:
  #         scheme: ${{ 'default' }}
  #         platform: ${{ 'iOS Simulator' }}
  #       run: |
  #         # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
  #         device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
  #         if [ $scheme = default ]; then scheme=$(cat default); fi
  #         if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
  #         file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
  #         xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

  deploy:
    runs-on: macos-latest
    # needs: test
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_FILE_BASE64_DEVELOPMENT }}
          p12-password: ${{ secrets.CERTIFICATES_PASSWORD_DEVELOPMENT }}
      - uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: com.acidtango.oipie
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      - name: "#️⃣ Generate Build Number"
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.github_token }}
      - run: security list-keychains
      - run: ./Build
      - uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: .build/Artifacts/Oipie.ipa/Oipie.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
